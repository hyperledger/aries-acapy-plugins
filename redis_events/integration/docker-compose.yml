version: "3"
#***************************************************************
# integration level test agents                                *
#***************************************************************

services:
  redis-cluster:
    image: redis:7.2.2
    container_name: cluster
    command: redis-cli --cluster create 172.28.0.101:6377 172.28.0.102:6378 172.28.0.103:6379 172.28.0.104:6380 172.28.0.105:6381 172.28.0.106:6382 --cluster-replicas 1 --cluster-yes
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    networks:
      acapy_default:
        ipv4_address: 172.28.0.107
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
  redis-node-1:
    image: redis:7.2.2
    container_name: node1
    command: ["redis-server", "/conf/redis.conf", "--port 6377"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6377:6377
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.101
  redis-node-2:
    image: redis:7.2.2
    container_name: node2
    command: ["redis-server", "/conf/redis.conf", "--port 6378"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6378:6378
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.102
  redis-node-3:
    image: redis:7.2.2
    container_name: node3
    command: ["redis-server", "/conf/redis.conf", "--port 6379"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6379:6379
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.103
  redis-node-4:
    image: redis:7.2.2
    container_name: node4
    command: ["redis-server", "/conf/redis.conf", "--port 6380"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6380:6380
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.104
  redis-node-5:
    image: redis:7.2.2
    container_name: node5
    command: ["redis-server", "/conf/redis.conf", "--port 6381"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6381:6381
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.105
  redis-node-6:
    image: redis:7.2.2
    container_name: node6
    command: ["redis-server", "/conf/redis.conf", "--port 6382"]
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD:-test1234}
    ports:
      - 6382:6382
    volumes:
      - ./redis.conf:/conf/redis.conf
    networks:
      acapy_default:
        ipv4_address: 172.28.0.106

  relay:
    image: redis-relay
    build:
      context: ..
      dockerfile: docker/services/Dockerfile
    ports:
      - 8071:8081
      - 7001:7001
    environment:
      - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379
      - TOPIC_PREFIX=acapy
      - STATUS_ENDPOINT_HOST=0.0.0.0
      - STATUS_ENDPOINT_PORT=7001
      - STATUS_ENDPOINT_API_KEY=test_api_key_1
      - INBOUND_TRANSPORT_CONFIG=[["http", "0.0.0.0", "8071"],["ws", "0.0.0.0", "8081"]]
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS=redis-node-3:6379
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    depends_on:
      - redis-cluster
    networks:
      - acapy_default
    command:
      [
        "/bin/sh",
        "-c",
        '/wait && python -m redis_events.v1_0.services.relay.relay "$@"',
        "--",
      ]

  deliverer:
    image: redis-deliverer
    build:
      context: ..
      dockerfile: docker/services/Dockerfile
    ports:
      - 7002:7002
    environment:
      - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379
      - TOPIC_PREFIX=acapy
      - STATUS_ENDPOINT_HOST=0.0.0.0
      - STATUS_ENDPOINT_PORT=7002
      - STATUS_ENDPOINT_API_KEY=test_api_key_2
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS=redis-node-3:6379
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    depends_on:
      - redis-cluster
    networks:
      - acapy_default
    command:
      [
        "/bin/sh",
        "-c",
        '/wait && python -m redis_events.v1_0.services.deliverer.deliver "$@"',
        "--",
      ]

  faber:
    image: plugin-image
    build:
      context: ..
      dockerfile: integration/Dockerfile
      args:
        - install_flags=--no-interaction --with integration
    ports:
      - 3001:3001
    depends_on:
      - redis-cluster
      - relay
      - deliverer
    command: start --arg-file integration.yml -e http://faber:3000 --label faber --log-level debug
    environment:
      - WAIT_BEFORE_HOSTS=10
      - WAIT_HOSTS=redis-node-3:6379, relay:8071, relay:8081
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    networks:
      - acapy_default

  alice:
    image: plugin-image
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - install_flags=--no-interaction --with integration
    command: start -it http 0.0.0.0 3000 -ot http -e http://alice:3000 --auto-accept-invites --auto-respond-messages --admin 0.0.0.0 3001 --admin-insecure-mode --label alice --no-ledger --log-level debug
    networks:
      - acapy_default

  tests:
    container_name: juggernaut
    build:
      context: .
      dockerfile: Dockerfile.test.runner
    environment:
      - WAIT_BEFORE_HOSTS=10
      - WAIT_HOSTS=faber:3001, alice:3000
      - WAIT_HOSTS_TIMEOUT=60
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=30
    depends_on:
      - redis-cluster
      - faber
      - alice
    networks:
      - acapy_default

networks:
  acapy_default:
    external: true
    name: acapy_default
